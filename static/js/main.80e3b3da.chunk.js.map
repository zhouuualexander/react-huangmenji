{"version":3,"sources":["component/Form.js","Huangmenji.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","ComposedTextField","props","className","TextField","id","label","defaultValue","value","onChange","e","target","options","Huangmenji","handleClick","console","log","state","setState","weight","chicken","蚝油","Math","round","海鲜酱","味极鲜","草菇老抽","鲍鱼汁","姜","水","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sVAIMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,SAQb,SAASC,EAAkBC,GACxBP,IAEhB,OACI,6BACI,wBAAIQ,UAAU,gBAAd,oDACA,6BACI,6BACA,8BAEJ,6BACN,kBAACC,EAAA,EAAD,CAAWC,GAAG,wBAAwBC,MAAM,eAAKC,aAAa,GAAGC,MAAON,EAAMM,MAAOC,SAAU,SAACC,GAAKR,EAAMO,SAASC,EAAEC,OAAOH,YCtBjI,IAAII,EAAU,CACV,MAAS,QACX,QAAU,EACV,YAAe,UACf,UAAa,UACb,YAAe,UACf,WAAc,CACZ,OAAU,UACV,OAAU,UACV,KAAQ,YAKCC,EAAb,YACI,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KAaRY,YAAc,WAEZC,QAAQC,IAAI,EAAKC,OACjB,EAAKC,UAAS,SAACD,GAEX,MAAO,CAACE,OAAQ,EAAKF,MAAMG,QAC3BC,eAAGC,KAAKC,MAAM,EAAKN,MAAMG,QAAQ,MACrCI,qBAAIF,KAAKC,MAAM,EAAKN,MAAMG,QAAQ,KACtCK,qBAAIH,KAAKC,MAAM,EAAKN,MAAMG,QAAQ,MACtCM,2BAAKJ,KAAKC,MAAM,EAAKN,MAAMG,QAAQ,KACnCO,qBAAIL,KAAKC,MAAM,EAAKN,MAAMG,QAAQ,MAClCQ,SAAEN,KAAKC,MAAM,EAAKN,MAAMG,QAAQ,OAChCS,SAAEP,KAAKC,MAAM,EAAKN,MAAMG,QAAQ,QAxBxB,EAAKH,MAAQ,CACXE,OAAO,EACPC,QAAQ,GACRC,eAAG,EACHG,qBAAI,EACJC,qBAAI,EACJC,2BAAK,EACLC,qBAAI,EACJC,SAAE,EACFC,SAAE,GAXW,EADvB,sEA+Ba,IAAD,OACJ,OACI,6BACI,wBAAI1B,UAAU,SAAd,oDACA,yBAAKA,UAAU,SAAQ,kBAAC,IAAgBS,IAExC,yBAAKT,UAAU,WACnB,kBAACF,EAAD,CAAmBO,MAAOsB,KAAKb,MAAMG,QAASX,SAAU,SAACD,GAAS,EAAKU,SAAS,CAACE,QAASZ,QAE1F,4BAAQL,UAAU,MAAM4B,QAASD,KAAKhB,aAAtC,sBAEA,yBAAKX,UAAU,gBAAK,iDAAQ2B,KAAKb,MAAMI,aAAnB,MACpB,yBAAKlB,UAAU,sBAAM,uDAAS2B,KAAKb,MAAMO,mBAApB,MACrB,yBAAKrB,UAAU,sBAAM,uDAAS2B,KAAKb,MAAMQ,mBAApB,MACrB,yBAAKtB,UAAU,4BAAO,6DAAU2B,KAAKb,MAAMS,yBAArB,MACtB,yBAAKvB,UAAU,sBAAM,uDAAS2B,KAAKb,MAAMU,mBAApB,MACrB,yBAAKxB,UAAU,UAAI,2CAAO2B,KAAKb,MAAMW,OAAlB,MACnB,yBAAKzB,UAAU,UAAI,2CAAO2B,KAAKb,MAAMY,OAAlB,WAhD/B,GAAgCG,aCNjBC,MARf,WACE,OACE,yBAAK9B,UAAU,OACf,kBAAC,EAAD,QCKgB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.80e3b3da.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport \"../Cal.css\"\nimport TextField from '@material-ui/core/TextField';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      \n    },\n    \n  },\n  \n}));\n\nexport default function ComposedTextField(props) {\n  const classes = useStyles();\n\n  return (\n      <div >\n          <p1 className=\"鸡腿\">请输入🍗的克数</p1>\n          <div>\n              <br/>\n              <br/>\n          </div>\n          <div>\n    <TextField id=\"standard-uncontrolled\" label=\"鸡腿\" defaultValue=\"\" value={props.value} onChange={(e)=>{props.onChange(e.target.value)}}/>\n    \n    </div>\n    \n    </div>\n  );\n}\n","import React ,{ Component } from \"react\";\nimport \"./Cal.css\"\nimport AnalogClock from 'analog-clock-react';\nimport ComposedTextField from '../src/component/Form.js';\nlet options = {\n    \"width\": \"100px\",\n  \"border\": true,\n  \"borderColor\": \"#2D111B\",\n  \"baseColor\": \"#1F426B\",\n  \"centerColor\": \"#BFB5E5\",\n  \"handColors\": {\n    \"second\": \"#745595\",\n    \"minute\": \"#037DF1\",\n    \"hour\": \"#60B380\"\n    }\n};\n\n\nexport class Huangmenji extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n          weight:0,\n          chicken:\"\",\n          蚝油:0,\n          海鲜酱:0,\n          味极鲜:0,\n          草菇老抽:0,\n          鲍鱼汁:0,\n          姜:0,\n          水:0,\n        };\n      }\n      handleClick = () => {\n        //do something\n        console.log(this.state);\n        this.setState((state) => {\n            // Important: read `state` instead of `this.state` when updating.\n            return {weight: this.state.chicken,\n            蚝油:Math.round(this.state.chicken/14.9),\n        海鲜酱:Math.round(this.state.chicken/100),\n    味极鲜:Math.round(this.state.chicken/76.9),\n草菇老抽:Math.round(this.state.chicken/125),\n鲍鱼汁:Math.round(this.state.chicken/90.9),\n姜:Math.round(this.state.chicken/34.48),\n水:Math.round(this.state.chicken/2)} // chicken * 10 for temp calculation algorithm\n          });\n       \n      }\n    render(){\n        return(\n            <div >\n                <h1 className=\"title\">黄焖鸡配料计算器</h1>\n                <div className=\"clock\"><AnalogClock {...options} />\n                </div>\n                <div className=\"wrapper\">\n            <ComposedTextField value={this.state.chicken} onChange={(value)=>{this.setState({chicken: value})}}/>\n            </div>\n            <button className=\"cal\" onClick={this.handleClick}>算一下</button>\n            \n            <div className=\"蚝油\"><p1>蚝油：{this.state.蚝油}g</p1></div>\n            <div className=\"海鲜酱\"><p1>海鲜酱：{this.state.海鲜酱}g</p1></div>\n            <div className=\"味极鲜\"><p1>味极鲜：{this.state.味极鲜}g</p1></div>\n            <div className=\"草菇老抽\"><p1>草菇老抽：{this.state.草菇老抽}g</p1></div>\n            <div className=\"鲍鱼汁\"><p1>鲍鱼汁：{this.state.鲍鱼汁}g</p1></div>\n            <div className=\"姜\"><p1>姜：{this.state.姜}g</p1></div>\n            <div className=\"水\"><p1>水：{this.state.水}g</p1></div>\n            \n            \n            </div>\n          \n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport { Huangmenji } from './Huangmenji';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Huangmenji/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}